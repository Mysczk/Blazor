@if (Task != null)
{
    <div class="task-details-sidebar">
        <Button_2 OnClick="Close" Type="danger">X</Button_2>
        <Button_2 OnClick="ToggleEditMode" Type="primary">@editModeText</Button_2>

        @if (isEditing)
        {
            <input @bind="Task.Text" class="task-name-input" />
            <textarea @bind="Task.Description" class="task-description-input"></textarea>
            <input type="date" @bind="Task.DueDate" class="task-due-date-input" />
        }
        else
        {
            <h3>@Task.Text</h3>
            <p>@Task.Description</p>
            <p>Due Date: @Task.DueDate.ToString("yyyy-MM-dd")</p>
        }

        <select @bind="selectedTaskListName">
            @foreach (var taskList in TaskLists)
            {
                <option value="@taskList.Name">@taskList.Name</option>
            }
        </select>
        <Button_2 OnClick="HandleStatusChange" Type="primary">Move</Button_2>
        <Button_2 OnClick="RemoveTask" Type="danger">Remove</Button_2>
    </div>
}

@code {
    [Parameter] public TaskModel? Task { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<(TaskModel task, TaskListModel newTaskList)> OnMoveTask { get; set; }
    [Parameter] public EventCallback<TaskModel> OnRemove { get; set; }
    [Parameter] public List<TaskListModel> TaskLists { get; set; } = new List<TaskListModel>();

    private string? selectedTaskListName;
    private bool isEditing = false;
    private string editModeText = "Edit";

    protected override void OnParametersSet()
    {
        selectedTaskListName = Task?.TaskList?.Name;
        isEditing = false;
        editModeText = isEditing ? "Save" : "Edit";
    }

    private void Close() 
    {
        OnClose.InvokeAsync();
    } 
        

    private void ToggleEditMode()
    {
        isEditing = !isEditing;
        editModeText = isEditing ? "Save" : "Edit";
    }

    private async Task HandleStatusChange()
    {
        var selectedTaskList = TaskLists.FirstOrDefault(tl => tl.Name == selectedTaskListName);
        if (selectedTaskList != null && Task != null)
        {
            await OnMoveTask.InvokeAsync((Task, selectedTaskList));
            Close();
        }
    }

    private async Task RemoveTask()
    {
        if (Task != null)
        {
            await OnRemove.InvokeAsync(Task);
            Close();
        }
    }
}