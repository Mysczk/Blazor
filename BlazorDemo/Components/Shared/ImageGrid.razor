@inject ImageService ImageService
@code {
    private List<string> images = new List<string>();
    private int selectedIndex = -1;
    private ElementReference overlayElement;
    private string? path;


    // Method used to load images from given path
    // Incomplete: No way to give new path
    // Future: Path.Combine
    protected override async Task OnInitializedAsync()
    {
        // Default path to images
        if (path == null)
        {
            images = await ImageService.GetImagePathsAsync("wwwroot/images/gallery");
        }
        else 
        { 
            images = await ImageService.GetImagePathsAsync(path);
        }
    }

    // Method that opens image to preview overlay
    private async Task OpenImage(int index)
    {
        selectedIndex = index;
        StateHasChanged();
        await FocusOverlay();
    }

    // Method that focuses overlay for key control
    private async Task FocusOverlay()
    {
        if (selectedIndex != -1)
        {
            await Task.Delay(50);
            await overlayElement.FocusAsync();
        }
    }

    // Method closing image overlay
    private void CloseImage()
    {
        selectedIndex = -1;
    }
    // Method giving previous image in overlay
    private void PreviousImage()
    {
        if (selectedIndex > 0)
        {
            selectedIndex--;
            StateHasChanged();
        }
        else
        {
            selectedIndex = images.Count - 1;
            StateHasChanged();
        }
    }

    // Method giving next image in overlay
    private void NextImage()
    {
        if (selectedIndex < images.Count - 1)
        {
            selectedIndex++;
            StateHasChanged();
        }
        else
        {
            selectedIndex = 0;
            StateHasChanged();
        }
    }

    // Method handling keyboard inputs
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (selectedIndex != -1)
        {
            if (e.Key == "ArrowLeft")
            {
                PreviousImage();
            }
            else if (e.Key == "ArrowRight")
            {
                NextImage();
            }
            else if (e.Key == "Escape")
            {
                CloseImage();
            }
            await InvokeAsync(StateHasChanged);
        }
    }
}

@if (images.Count == 0)
{
    <p>Žádné obrázky nejsou k dispozici.</p>
}
else
{
    <!-- Gallery structure --> 
    <div class="gallery">
        @foreach (var img in images.Select((path, index) => new { path, index })) // LINQ query for image path and its index
        {
            <div class="gallery-item">
                <img src="@img.path" @onclick="() => OpenImage(img.index)" /> <!-- Creation of individual image and assigning open method -->
            </div>
        }
    </div>
}
<!-- Overlay structure -->
@if (selectedIndex != -1)
{
    <div class="gal-overlay" tabindex="0" @onkeydown="HandleKeyDown" @ref="overlayElement">
        <button class="gal-nav-btn left" @onclick="PreviousImage">&#9665;</button>

        <img src="@images[selectedIndex]" @onclick="CloseImage" />

        <button class="gal-nav-btn right" @onclick="NextImage">&#9655;</button>
    </div>
}

<!-- Styles -->
<style>
    .gallery {
        column-count: 5;
        column-gap: 1rem;
        padding: 1rem;
    }
    @@media (max-width: 1200px) {
        .gallery {
            column-count: 4;
        }
    }

    @@media (max-width: 992px) {
        .gallery {
            column-count: 3;
        }
    }

    @@media (max-width: 768px) {
        .gallery {
            column-count: 2;
        }
    
}

    .gallery-item {
        break-inside: avoid;
        margin-bottom: 1rem;
        background-color: #f8f8f8;
        border-radius: 0.5rem;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .gallery-item img {
        width: 100%;
        display: block;
    }

    .gallery img {
        transition: transform 0.2s;
    }

    .gallery img:hover {
        transform: scale(1.05);
    }

    .gal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .gal-overlay img {
        max-width: 80%;
        max-height: 80%;
        border-radius: 10px;
    }

    .gal-nav-btn {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        background: rgba(255, 255, 255, 0.5);
        border: none;
        font-size: 24px;
        cursor: pointer;
        padding: 10px;
        border-radius: 50%;
    }

    .gal-nav-btn.left {
        left: 20px;
    }

    .gal-nav-btn.right {
        right: 20px;
    }
</style>