<div class="kanban-column">
    @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="error">@errorMessage</p>
        }
    <div class="kanban-column-header">
        @if (isEditing)
        {
            <input @bind="taskListModel.Name"
                   @onblur="SaveTaskListName"
                   @bind:event="oninput"
                   @onkeypress="HandleKeyPress"
                   @ref="taskListInput"
                   class="task-list-input"
                   autofocus />
        }
        else
        {
            <h4 @ondblclick="StartEditing">@taskListModel.Name</h4>
        }
        <Button_2 OnClick="() => OnRemoveTaskList.InvokeAsync(taskListModel)" Type="danger">❌</Button_2>
    </div>

    <div class="task-list">
        @foreach (var task in taskListModel.Tasks)
        {
            <TaskItem Task="task" TaskLists="TaskLists" OnMoveTask="OnMoveTask" OnRemove="RemoveTask" />
        }
    </div>
</div>

@code {
    [Parameter]
    public TaskListModel taskListModel { get; set; } = new();

    [Parameter]
    public List<TaskListModel> TaskLists { get; set; } = new();

    [Parameter]
    public EventCallback<TaskListModel> OnRenameTaskList { get; set; }
    [Parameter]
    public EventCallback<(TaskModel task, TaskListModel newTaskList)> OnMoveTask { get; set; }

    [Parameter]
    public EventCallback<TaskListModel> OnRemoveTaskList { get; set; }

    private bool isEditing = false;
    private ElementReference taskListInput;
    private string? errorMessage;

    private async Task StartEditing()
    {
        isEditing = true;
        await Task.Delay(50);
        await taskListInput.FocusAsync();
    }

     private async Task SaveTaskListName()
    {
        if (string.IsNullOrWhiteSpace(taskListModel.Name))
        {
            errorMessage = "Název task listu nemůže být prázdný.";
            return;
        }

        try
        {
            await OnRenameTaskList.InvokeAsync(taskListModel);
            isEditing = false;
            errorMessage = null; // Resetujeme chybu, pokud vše proběhlo ok
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message; // Uložíme text chyby pro zobrazení
        }
    }


    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SaveTaskListName();
        }
    }

    private void RemoveTask(TaskModel task)
    {
        taskListModel.Tasks.Remove(task);
    }
}
